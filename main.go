package main

import (
	"database/sql"
	"fmt"
	_ "github.com/go-sql-driver/mysql"
	"github.com/jinzhu/gorm"
	"github.com/olucvolkan/todo-app-case/api/config"
	"github.com/olucvolkan/todo-app-case/api/handlers"
	"github.com/olucvolkan/todo-app-case/api/models"
	"github.com/olucvolkan/todo-app-case/api/repositories"
	"github.com/olucvolkan/todo-app-case/api/server"
	"github.com/olucvolkan/todo-app-case/app"
	"github.com/olucvolkan/todo-app-case/docs"

	// docs is generated by Swag CLI, you have to import it.
	swaggerFiles "github.com/swaggo/files"

	ginSwagger "github.com/swaggo/gin-swagger"
)

var err error

// @title Todo Api Example
// @version 1.0
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.email volkanoluc@gmail.com
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:8081
// @BasePath /
// @query.collection.format multi
// @x-extension-openapi {"example": "value on a json format"}

func main() {
	config := config.New()

	ensureDBExists(config)

	fmt.Println(config.DBUrl())
	gormDB, err := gorm.Open("mysql", config.DBUrl())
	if err != nil {
		fmt.Println(fmt.Errorf("Can't connect to database, err: %v", err))
		return
	}
	gormDB.Set("gorm:table_options", "ENGINE=InnoDB").AutoMigrate(models.Todo{})
	defer gormDB.Close()

	app := app.New(gormDB)
	todoRepo := &repositories.TodoRepo{App: app}
	handlers := handlers.New(app, todoRepo)
	server := server.New(handlers)

	// programmatically set swagger info
	docs.SwaggerInfo.Title = "TODO API"
	docs.SwaggerInfo.Description = "Todo App Server"
	docs.SwaggerInfo.Version = "1.0"
	docs.SwaggerInfo.Host = "localhost:8080"
	docs.SwaggerInfo.Schemes = []string{"http"}

	server.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	server.Run(fmt.Sprintf(":%s", config.HTTPPort))
}

func ensureDBExists(config *config.Config) {
	db, err := sql.Open("mysql", config.DBUrlWithoutDBName())

	if err != nil {
		fmt.Println("can't connect database for creating table")
		return
	}

	defer db.Close()
	db.Exec("CREATE DATABASE IF NOT EXISTS " + config.DBName + ";")
	if err != nil {
		fmt.Println(err.Error())
	} else {
		fmt.Println("Successfully created database or updated")
	}
}
